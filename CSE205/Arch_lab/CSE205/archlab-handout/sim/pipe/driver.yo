                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f6c804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804803000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Lasha Koroshinadze
                            | # lasha.koroshinadze
                            | #
                            | # Firstly I added iaddq instruction to pipe-full.hcl;
                            | # Next I started implementing "Duff's device" for loop unrolling;
                            | # In my case I did five-fold unrolling since there are bytecode size restrictions
                            | # and there are five stages of 5 stages of instruction pipeline;
                            | # Then I rearranged statements, like firstly reading 5 memory addresses
                            | # and then writing back or doing if conditions;
                            | # For each element I created if statements to count the result.
                            | # For the remaining cases I created 4 separate branches to handle
                            | # situations where the len is not a multiple of 5;
                            | # This is a long part, but it avoids incrementing pointers
                            | # which is needed in a basic switch statement;
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x03b: 6300                 |   xorq %rax, %rax   # count = 0
0x03d: c0f2fbffffffffffffff |   iaddq $-5, %rdx   # len -= 5
0x047: 724401000000000000   |   jl incr           # if negative, skip the loop
                            | 
0x050:                      | Loop:
0x050: 50a70000000000000000 |     mrmovq (%rdi), %r10     # read the first value
0x05a: 50b70800000000000000 |     mrmovq 8(%rdi), %r11    # read the second value
0x064: 50c71000000000000000 |     mrmovq 16(%rdi), %r12   # read the third value
0x06e: 50d71800000000000000 |     mrmovq 24(%rdi), %r13   # read the fourth value
0x078: 50e72000000000000000 |     mrmovq 32(%rdi), %r14   # read the fifth value
0x082: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # write the first value
0x08c: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)    # write the second value
0x096: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)   # write the third value
0x0a0: 40d61800000000000000 |     rmmovq %r13, 24(%rsi)   # write the fourth value
0x0aa: 40e62000000000000000 |     rmmovq %r14, 32(%rsi)   # write the fifth value
                            | 
0x0b4:                      | C1:
0x0b4: 62aa                 |     andq %r10, %r10     # %r10 <= 0?
0x0b6: 71c900000000000000   |     jle C2              # if so, go to the next if
0x0bf: c0f00100000000000000 |     iaddq $1, %rax      # count++
                            | 
0x0c9:                      | C2:
0x0c9: 62bb                 |     andq %r11, %r11     # %r11 <= 0?
0x0cb: 71de00000000000000   |     jle C3              # if so, go to the next if
0x0d4: c0f00100000000000000 |     iaddq $1, %rax      # count++
                            | 
0x0de:                      | C3:
0x0de: 62cc                 |     andq %r12, %r12     # %r12 <= 0?
0x0e0: 71f300000000000000   |     jle C4              # if so, go to the next if
0x0e9: c0f00100000000000000 |     iaddq $1, %rax      # count++
                            | 
0x0f3:                      | C4:
0x0f3: 62dd                 |     andq %r13, %r13     # %r13 <= 0?
0x0f5: 710801000000000000   |     jle C5              # if so, go to the next if
0x0fe: c0f00100000000000000 |     iaddq $1, %rax      # count++
                            | 
0x108:                      | C5:
0x108: 62ee                 |     andq %r14, %r14     # %r14 <= 0?
0x10a: 711d01000000000000   |     jle iter            # if so, goto iter
0x113: c0f00100000000000000 |     iaddq $1, %rax      # count++
                            | 
0x11d:                      | iter:
0x11d: c0f72800000000000000 |     iaddq $40, %rdi     # src += 5
0x127: c0f62800000000000000 |     iaddq $40, %rsi     # dst += 5
0x131: c0f2fbffffffffffffff |     iaddq $-5, %rdx     # len -= 5
0x13b: 755000000000000000   |     jge Loop            # if positive or zero, go back to Loop
                            | 
0x144:                      | incr:
0x144: c0f20500000000000000 |     iaddq $5, %rdx  # len += 5
                            | 
0x14e:                      | switch:                 # we implement all the remaining cases separately
0x14e: 6222                 |     andq %rdx, %rdx
0x150: 734703000000000000   |     je Done             # if len == 0, goto Done
0x159: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x163: 731e03000000000000   |     je is1              # if len == 1, goto is1
0x16c: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x176: 73c302000000000000   |     je is2              # if len == 2, goto is2
0x17f: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x189: 733f02000000000000   |     je is3              # if len == 3, goto is3
                            | 
                            |                         # else len == 4 and is4 will be executed
                            | 
0x192:                      | is4:
0x192: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x19c: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x1a6: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x1b0: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x1ba: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x1c4: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x1ce: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)
0x1d8: 40d61800000000000000 |     rmmovq %r13, 24(%rsi)
0x1e2:                      | if41:
0x1e2: 62aa                 |     andq %r10, %r10
0x1e4: 71f701000000000000   |     jle if42
0x1ed: c0f00100000000000000 |     iaddq $1, %rax
0x1f7:                      | if42:
0x1f7: 62bb                 |     andq %r11, %r11
0x1f9: 710c02000000000000   |     jle if43
0x202: c0f00100000000000000 |     iaddq $1, %rax
0x20c:                      | if43:
0x20c: 62cc                 |     andq %r12, %r12
0x20e: 712102000000000000   |     jle if44
0x217: c0f00100000000000000 |     iaddq $1, %rax
0x221:                      | if44:
0x221: 62dd                 |     andq %r13, %r13
0x223: 714703000000000000   |     jle Done
0x22c: c0f00100000000000000 |     iaddq $1, %rax
0x236: 704703000000000000   |     jmp Done
                            | 
0x23f:                      | is3:
0x23f: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x249: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x253: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x25d: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x267: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x271: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)
0x27b:                      | if31:
0x27b: 62aa                 |     andq %r10, %r10
0x27d: 719002000000000000   |     jle if32
0x286: c0f00100000000000000 |     iaddq $1, %rax
0x290:                      | if32:
0x290: 62bb                 |     andq %r11, %r11
0x292: 71a502000000000000   |     jle if33
0x29b: c0f00100000000000000 |     iaddq $1, %rax
0x2a5:                      | if33:
0x2a5: 62cc                 |     andq %r12, %r12
0x2a7: 714703000000000000   |     jle Done
0x2b0: c0f00100000000000000 |     iaddq $1, %rax
0x2ba: 704703000000000000   |     jmp Done
                            | 
0x2c3:                      | is2:
0x2c3: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x2cd: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x2d7: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x2e1: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x2eb:                      | if21:
0x2eb: 62aa                 |     andq %r10, %r10
0x2ed: 710003000000000000   |     jle if22
0x2f6: c0f00100000000000000 |     iaddq $1, %rax
0x300:                      | if22:
0x300: 62bb                 |     andq %r11, %r11
0x302: 714703000000000000   |     jle Done
0x30b: c0f00100000000000000 |     iaddq $1, %rax
0x315: 704703000000000000   |     jmp Done
                            | 
0x31e:                      | is1:
0x31e: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x328: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x332:                      | c11:
0x332: 62aa                 |     andq %r10, %r10
0x334: 714703000000000000   |     jle Done
0x33d: c0f00100000000000000 |     iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x347:                      | Done:
0x347: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x348:                      | End:
                            | #/* $end ncopy-ys */
0x348:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x348:                      | check:
                            | 	# Return value test
0x348: 30fa0000000000000000 | 	irmovq $0,%r10
0x352: 61a0                 | 	subq %r10,%rax
0x354: 737003000000000000   | 	je checkb
0x35d: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x367: 70ae04000000000000   | 	jmp cdone
0x370:                      | checkb:
                            | 	# Code length check
0x370: 30f04803000000000000 | 	irmovq EndFun,%rax
0x37a: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x384: 6120                 | 	subq %rdx,%rax
0x386: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x390: 6102                 | 	subq %rax,%rdx
0x392: 75ae03000000000000   | 	jge checkm
0x39b: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3a5: 70ae04000000000000   | 	jmp cdone
0x3ae:                      | checkm:
0x3ae: 30f2c804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3b8: 30f3b004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3c2: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x3cc: 6277                 | 	andq %rdi,%rdi
0x3ce: 732c04000000000000   | 	je checkpre         # Skip check if count = 0
0x3d7:                      | mcloop:
0x3d7: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x3e1: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x3eb: 6160                 | 	subq %rsi,%rax
0x3ed: 730904000000000000   | 	je  mok
0x3f6: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x400: 70ae04000000000000   | 	jmp cdone
0x409:                      | mok:
0x409: 30f00800000000000000 | 	irmovq $8,%rax
0x413: 6002                 | 	addq %rax,%rdx	  # dest ++
0x415: 6003                 | 	addq %rax,%rbx    # src++
0x417: 30f00100000000000000 | 	irmovq $1,%rax
0x421: 6107                 | 	subq %rax,%rdi    # cnt--
0x423: 76d703000000000000   | 	jg mcloop
0x42c:                      | checkpre:
                            | 	# Check for corruption
0x42c: 30f2c004000000000000 | 	irmovq Predest,%rdx
0x436: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x440: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x44a: 6120                 | 	subq %rdx,%rax
0x44c: 736804000000000000   | 	je checkpost
0x455: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x45f: 70ae04000000000000   | 	jmp cdone
0x468:                      | checkpost:
                            | 	# Check for corruption
0x468: 30f2c804000000000000 | 	irmovq Postdest,%rdx
0x472: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x47c: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x486: 6120                 | 	subq %rdx,%rax
0x488: 73a404000000000000   | 	je checkok
0x491: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x49b: 70ae04000000000000   | 	jmp cdone
0x4a4:                      | checkok:
                            | 	# Successful checks
0x4a4: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4ae:                      | cdone:
0x4ae: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4b0:                      | 	.align 8
0x4b0:                      | src:
0x4b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4c0:                      | 	.align 16
0x4c0:                      | Predest:
0x4c0: fadebc0000000000     | 	.quad 0xbcdefa
0x4c8:                      | dest:
0x4c8:                      | Postdest:
0x4c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4d0:                      | .align 8
                            | # Run time stack
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
                            | 
0x550:                      | Stack:
