#######################################################################
# Test for copying block of size K;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $K, %rdx		# src and dst have K elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Lasha Koroshinadze
# lasha.koroshinadze
#
# Firstly I added iaddq instruction to pipe-full.hcl;
# Next I started implementing "Duff's device" for loop unrolling;
# In my case I did five-fold unrolling since there are bytecode size restrictions
# and there are five stages of 5 stages of instruction pipeline;
# Then I rearranged statements, like firstly reading 5 memory addresses
# and then writing back or doing if conditions;
# For each element I created if statements to count the result.
# For the remaining cases I created 4 separate branches to handle
# situations where the len is not a multiple of 5;
# This is a long part, but it avoids incrementing pointers
# which is needed in a basic switch statement;
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
  # Loop header
  xorq %rax, %rax   # count = 0
  iaddq $-5, %rdx   # len -= 5
  jl incr           # if negative, skip the loop

Loop:
    mrmovq (%rdi), %r10     # read the first value
    mrmovq 8(%rdi), %r11    # read the second value
    mrmovq 16(%rdi), %r12   # read the third value
    mrmovq 24(%rdi), %r13   # read the fourth value
    mrmovq 32(%rdi), %r14   # read the fifth value
    rmmovq %r10, (%rsi)     # write the first value
    rmmovq %r11, 8(%rsi)    # write the second value
    rmmovq %r12, 16(%rsi)   # write the third value
    rmmovq %r13, 24(%rsi)   # write the fourth value
    rmmovq %r14, 32(%rsi)   # write the fifth value

C1:
    andq %r10, %r10     # %r10 <= 0?
    jle C2              # if so, go to the next if
    iaddq $1, %rax      # count++

C2:
    andq %r11, %r11     # %r11 <= 0?
    jle C3              # if so, go to the next if
    iaddq $1, %rax      # count++

C3:
    andq %r12, %r12     # %r12 <= 0?
    jle C4              # if so, go to the next if
    iaddq $1, %rax      # count++

C4:
    andq %r13, %r13     # %r13 <= 0?
    jle C5              # if so, go to the next if
    iaddq $1, %rax      # count++

C5:
    andq %r14, %r14     # %r14 <= 0?
    jle iter            # if so, goto iter
    iaddq $1, %rax      # count++

iter:
    iaddq $40, %rdi     # src += 5
    iaddq $40, %rsi     # dst += 5
    iaddq $-5, %rdx     # len -= 5
    jge Loop            # if positive or zero, go back to Loop

incr:
    iaddq $5, %rdx  # len += 5

switch:                 # we implement all the remaining cases separately
    andq %rdx, %rdx
    je Done             # if len == 0, goto Done
    iaddq $-1, %rdx
    je is1              # if len == 1, goto is1
    iaddq $-1, %rdx
    je is2              # if len == 2, goto is2
    iaddq $-1, %rdx
    je is3              # if len == 3, goto is3

                        # else len == 4 and is4 will be executed

is4:
    mrmovq (%rdi), %r10
    mrmovq 8(%rdi), %r11
    mrmovq 16(%rdi), %r12
    mrmovq 24(%rdi), %r13
    rmmovq %r10, (%rsi)
    rmmovq %r11, 8(%rsi)
    rmmovq %r12, 16(%rsi)
    rmmovq %r13, 24(%rsi)
if41:
    andq %r10, %r10
    jle if42
    iaddq $1, %rax
if42:
    andq %r11, %r11
    jle if43
    iaddq $1, %rax
if43:
    andq %r12, %r12
    jle if44
    iaddq $1, %rax
if44:
    andq %r13, %r13
    jle Done
    iaddq $1, %rax
    jmp Done

is3:
    mrmovq (%rdi), %r10
    mrmovq 8(%rdi), %r11
    mrmovq 16(%rdi), %r12
    rmmovq %r10, (%rsi)
    rmmovq %r11, 8(%rsi)
    rmmovq %r12, 16(%rsi)
if31:
    andq %r10, %r10
    jle if32
    iaddq $1, %rax
if32:
    andq %r11, %r11
    jle if33
    iaddq $1, %rax
if33:
    andq %r12, %r12
    jle Done
    iaddq $1, %rax
    jmp Done

is2:
    mrmovq (%rdi), %r10
    mrmovq 8(%rdi), %r11
    rmmovq %r10, (%rsi)
    rmmovq %r11, 8(%rsi)
if21:
    andq %r10, %r10
    jle if22
    iaddq $1, %rax
if22:
    andq %r11, %r11
    jle Done
    iaddq $1, %rax
    jmp Done

is1:
    mrmovq (%rdi), %r10
    rmmovq %r10, (%rsi)
c11:
    andq %r10, %r10
    jle Done
    iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $K,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
